AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: >-
  Setting up a pipeline for the s2si service

Parameters:
  ComputeType:
    AllowedValues:
      - BUILD_GENERAL1_SMALL
      - BUILD_GENERAL1_MEDIUM
      - BUILD_GENERAL1_LARGE
    Default: BUILD_GENERAL1_SMALL
    Description: AWS CodeBuild project for s2si
    Type: String
  ContainerType:
    AllowedValues:
      - LINUX_CONTAINER
    Default: LINUX_CONTAINER
    Type: String
  SourceCodeProvider:
    Type: String
    Default: GitHub
    AllowedValues:
      - GitHub
  GitHubOAuthToken:
    Description: OAuth token used by AWS CodePipeline to connect to GitHub
    NoEcho: true
    Type: String
    Default: 'e27d8fb19a9222f81bdce4e1b5ba2b6b97b76a11'
  GitHubUsername:
    Description: GitHub username
    Type: String
    Default: 'joelfogue'
  GitHubRepo:
    Description: GitHub repo name
    Type: String
    Default: 's2si'
  GitHubBranch:
    Type: String
    Default: develop
  DeployParameterOverrides:
    Description: Parameter overrides for the deploy stage
    Type: String
    Default: '{}'
  DeployStackName:
    Description: The stack name for the deploy stage
    Type: String
    Default: 's2si-deployment-pipeline'
  DeployRoleName:
    Type: String
    Default: 's2si-deployer-role'
  IntegrationTestsRoleName:
    Description: >-
      The IAM role assumed by CodeBuild and Cloudformation
    Type: String
    Default: 's2si-integration-tests-role'
  BuildSpecFilePath:
    Type: String
    Default: './deployment/buildspec.yaml'
  IntegrationTestsBuildSpecFilePath:
    Type: String
    Default: './deployment/buildspec-integration-tests.yaml'

Conditions:
  HasTestStage:
    !Not [!Equals [!Ref IntegrationTestsRoleName, 's2si-integration-tests-role']]
  HasDeployStage:
    !Not [!Equals [!Ref DeployRoleName, 's2si-deployer-role']]
  UseGitHub:
    !Equals [!Ref SourceCodeProvider, 'GitHub']

Rules:
  GithubConditions:
    RuleCondition: !Equals [!Ref SourceCodeProvider, 'GitHub']
    Assertions:
      - Assert: !Not [!Equals [!Ref GitHubUsername, '']]
        AssertDescription: "GitHubUsername must be specified when SourceCodeProvider is GitHub"
      - Assert: !Not [!Equals [!Ref GitHubRepo, '']]
        AssertDescription: "GitHubRepo must be specified when SourceCodeProvider is GitHub"
      - Assert: !Not [!Equals [!Ref GitHubOAuthToken, '']]
        AssertDescription: "GitHubOAuthToken must be specified when SourceCodeProvider is GitHub"
      - Assert: !Not [!Equals [!Ref GitHubBranch, '']]
        AssertDescription: "GitHubBranch must be specified when SourceCodeProvider is GitHub"

Resources:
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location: !Ref Artifacts
        Type: S3
      RoleArn: !GetAtt PipelineRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: GitHubSource
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: "1"
              Configuration:
                Owner: !Ref GitHubUsername
                OAuthToken: !Ref GitHubOAuthToken
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                PollForSourceChanges: false
              OutputArtifacts:
                - Name: SourceArtifact
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              Configuration:
                ProjectName: !Ref BuildProject
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts:
                - Name: BuildArtifact
        - !If
          - HasTestStage
          - Name: Test
            Actions:
              - Name: IntegrationTests
                ActionTypeId:
                  Category: Test
                  Owner: AWS
                  Provider: CodeBuild
                  Version: '1'
                Configuration:
                  ProjectName: !Ref IntegrationTestsProject
                  PrimarySource: SourceArtifact
                InputArtifacts:
                  - Name: SourceArtifact
                  - Name: BuildArtifact
          - !Ref AWS::NoValue
        - !If
          - HasDeployStage
          - Name: Deploy
            Actions:
              - Name: CreateChangeSet
                ActionTypeId:
                  Category: Deploy
                  Owner: AWS
                  Provider: CloudFormation
                  Version: '1'
                InputArtifacts:
                  - Name: BuildArtifact
                Configuration:
                  ActionMode: CHANGE_SET_REPLACE
                  Capabilities: CAPABILITY_IAM,CAPABILITY_AUTO_EXPAND
                  ParameterOverrides: !Ref DeployParameterOverrides
                  RoleArn: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${DeployRoleName}
                  StackName: !Ref DeployStackName
                  TemplatePath: "BuildArtifact::packaged.yaml"
                  ChangeSetName: !Sub a-${DeployStackName}-Deploy
                RunOrder: 1
              - Name: ExecuteChangeSet
                ActionTypeId:
                  Category: Deploy
                  Owner: AWS
                  Provider: CloudFormation
                  Version: '1'
                Configuration:
                  ActionMode: CHANGE_SET_EXECUTE
                  StackName: !Ref DeployStackName
                  ChangeSetName: !Sub a-${DeployStackName}-Deploy
                RunOrder: 2
          - !Ref AWS::NoValue

  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      Description: !Sub "Used by CodePipeline"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "codepipeline.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: s3-access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:DeleteObject"
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:PutObject"
                Resource:
                  - !Sub arn:${AWS::Partition}:s3:::${Artifacts}/*
              - Effect: Allow
                Action:
                  - "s3:ListBucket"
                  - "s3:GetBucketPolicy"
                Resource:
                  - !Sub arn:${AWS::Partition}:s3:::${Artifacts}
        - PolicyName: codebuild-access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "codebuild:StartBuild"
                  - "codebuild:BatchGetBuilds"
                Resource:
                  - !GetAtt BuildProject.Arn
                  - !If
                    - HasTestStage
                    - !GetAtt IntegrationTestsProject.Arn
                    - !Ref AWS::NoValue
        - !If
          - HasDeployStage
          - PolicyName: deploy-cloudformation-access
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "cloudformation:DescribeStacks"
                    - "cloudformation:CreateChangeSet"
                    - "cloudformation:ExecuteChangeSet"
                    - "cloudformation:DescribeChangeSet"
                  Resource:
                    - !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${DeployStackName}/*
          - !Ref AWS::NoValue
        - !If
          - HasDeployStage
          - PolicyName: deploy-iam-access
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "iam:PassRole"
                  Resource:
                    - !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${DeployRoleName}
          - !Ref AWS::NoValue

  Artifacts:
    Properties:
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 30
            Status: Enabled
    Type: AWS::S3::Bucket

  BuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      ServiceRole: !GetAtt BuildProjectRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Ref BuildSpecFilePath
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: !Ref ComputeType
        Image: 'aws/codebuild/standard:2.0'
        Type: !Ref ContainerType
        EnvironmentVariables:
          - Name: PACKAGE_BUCKET
            Value: !Ref Artifacts

  # GitHubWebhook:
  #   Type: 'AWS::CodePipeline::Webhook'
  #   Condition: UseGitHub
  #   Properties:
  #     AuthenticationConfiguration:
  #       SecretToken: !Ref GitHubOAuthToken
  #     Filters:
  #       - JsonPath: "$.ref"
  #         MatchEquals: refs/heads/{Branch}
  #     Authentication: GITHUB_HMAC
  #     TargetPipeline: !Ref Pipeline
  #     TargetAction: GitHubSource
  #     TargetPipelineVersion: !GetAtt Pipeline.Version
  #     RegisterWithThirdParty: true

  IntegrationTestsProject:
    Condition: HasTestStage
    Type: AWS::CodeBuild::Project
    Properties:
      ServiceRole: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${IntegrationTestsRoleName}
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Ref IntegrationTestsBuildSpecFilePath
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: !Ref ComputeType
        Image: 'aws/codebuild/standard:2.0'
        Type: !Ref ContainerType
        EnvironmentVariables:
          - Name: PACKAGE_BUCKET
            Value: !Ref Artifacts

  CodeBuildPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub codebuild-access-${AWS::StackName}
      Roles:
        - !Ref BuildProjectRole
        - !If
          - HasTestStage
          - !Ref IntegrationTestsRoleName
          - !Ref AWS::NoValue
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*
          - Action:
              - s3:PutObject
              - s3:GetObject
              - s3:GetObjectVersion
            Effect: Allow
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${Artifacts}/*
          - Action:
              - s3:ListBucket
            Effect: Allow
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${Artifacts}

  BuildProjectRole:
    Type: AWS::IAM::Role
    Properties:
      Description: !Sub "Used in CodeBuild project. Created by CloudFormation ${AWS::StackId}"
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
        Version: '2012-10-17'
      Path: /service-role/

  DeployStagePolicy:
    Condition: HasDeployStage
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub deploy-stage-access-${AWS::StackName}
      Roles:
        - !Ref DeployRoleName
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - s3:GetObject
            Effect: Allow
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${Artifacts}/*

Outputs:
  ArtifactsBucketArn:
    Value: !GetAtt Artifacts.Arn
  ArtifactsBucketName:
    Value: !Ref Artifacts
  PipelineName:
    Value: !Ref Pipeline
  PipelineVersion:
    Value: !GetAtt Pipeline.Version

