AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: S2si Yonkers Businesses
Parameters:
  ArtifactBucket:
    Description: BucketName for the Artifacts for the APIs in this account
    Type: String
    Default: joelturkey
  Environment:
    AllowedValues:
      - Dev
      - QA
      - Prod
    ConstraintDescription: You must specify a valid EnvironmentValue
    Default: Dev
    Description: Environment to Deploy to
    Type: String
  BusinessTableParam:
    Type: String
    Default: "JoelBusiness"
  CategoryTableNameParam:
    Type: String
    Default: JoelCategory  

Globals:
  Function:
    Timeout: 5
  #   Tracing: Active
  # Api:
  #   TracingEnabled: true

Resources:

  CloudWatchRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - >-
          arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
  Account:
    Type: 'AWS::ApiGateway::Account'
    Properties:
      CloudWatchRoleArn: !GetAtt 
        - CloudWatchRole
        - Arn

  BusinessTable:
    Type: AWS::DynamoDB::Table
    Description: Business table
    Properties:
      TableName: !Ref BusinessTableParam
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: "BusinessId"
          AttributeType: S
        - AttributeName: "CategoryId"
          AttributeType: S
      KeySchema:
        - AttributeName: "BusinessId"
          KeyType: HASH
        - AttributeName: "CategoryId"
          KeyType: RANGE

  CategoryTable:
    Type: AWS::DynamoDB::Table
    Description: Users table
    Properties:
      TableName: !Ref CategoryTableNameParam
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: "categoryId"
          AttributeType: S
      KeySchema:
        - AttributeName: "categoryId"
          KeyType: HASH

  CreatePipeline:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: ../api/lambdas/githubwebhooks/createPipeline
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 180
      FunctionName: createPipeline
      Policies:
        - AWSLambdaFullAccess
        - AWSCloudFormationFullAccess
        - AWSCodePipelineFullAccess
        - CloudWatchLogsFullAccess
        - Statement:
          - Sid: iamPolicies
            Effect: Allow
            Action:
            - iam:Create*
            - iam:Delete*
            - iam:PutRolePolicy
            - codebuild:DeleteProject
            Resource: !Sub 'arn:aws:iam::${AWS::AccountId}:role/*'
          - Sid: codebuildPolicies
            Effect: Allow
            Action:
            - codebuild:DeleteProject
            Resource: !Sub 'arn:aws:codebuild:us-east-1:${AWS::AccountId}:project/*' 

      Tags:
        Author: Joel Fogue
        Project: s2si
      Events:
        getAllCategories:
          Type: Api
          Properties:
            Path: /githubWebhook
            Method: post
            RestApiId:
              Ref: RestAPI
              
  CreateNewCategory:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: ../api/lambdas/categories/createNewCategory
      Handler: app.lambda_handler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 180
      FunctionName: CreateNewCategory
      Environment:
        Variables:
          CATEGORY_TABLE_NAME: !Ref CategoryTableNameParam
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambdaVPCAccessExecutionRole
        - CloudWatchLogsFullAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref CategoryTableNameParam
      Tags:
        Author: Joel Fogue
        Project: s2si
      Events:
        CreateNewCategory:
          Type: Api
          Properties:
            Path: "/category"
            Method: post
            RestApiId:
              Ref: RestAPI

  UpdateCategory:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: ../api/lambdas/categories/updateCategory
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 180
      FunctionName: UpdateCategory
      Environment:
        Variables:
          CATEGORY_TABLE_NAME: !Ref CategoryTableNameParam
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambdaVPCAccessExecutionRole
        - CloudWatchLogsFullAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref CategoryTableNameParam
      Tags:
        Author: Joel Fogue
        Project: s2si
      Events:
        UpdateCategory:
          Type: Api
          Properties:
            Path: "/Category/{CategoryId}"
            Method: put
            RestApiId:
              Ref: RestAPI

  DeleteCategory:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: ../api/lambdas/categories/deleteCategory
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 900
      FunctionName: DeleteCategory
      Environment:
        Variables:
          CATEGORY_TABLE_NAME: !Ref CategoryTableNameParam
      Policies:
        - AWSLambdaBasicExecutionRole
        - CloudWatchLogsFullAccess
        - AWSLambdaRole
        - DynamoDBCrudPolicy:
            TableName: !Ref CategoryTable
      Tags:
        Author: Joel Fogue
        Project: s2si
      Events:
        DeleteCategory:
          Type: Api
          Properties:
            Path: "/Category/{CategoryId}"
            Method: delete
            RestApiId:
              Ref: RestAPI


  GetCategoryById:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: ../api/lambdas/categories/getCategoryById
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 180
      FunctionName: GetCategoryById
      Environment:
        Variables:
          CATEGORY_TABLE_NAME: !Ref CategoryTableNameParam
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambdaVPCAccessExecutionRole
        - CloudWatchLogsFullAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref CategoryTableNameParam
      Tags:
        Author: Joel Fogue
        Project: s2si
      Events:
        getBusinessById:
          Type: Api
          Properties:
            Path: /Category/{CategoryId}
            Method: get
            RestApiId:
              Ref: RestAPI


  GetAllCategories:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: ../api/lambdas/categories/getAllCategories
      Handler: app.lambda_handler
      Runtime: python3.7
      MemorySize: 128
      Timeout: 180
      FunctionName: GetAllCategories
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambdaVPCAccessExecutionRole
        - CloudWatchLogsFullAccess
      Tags:
        Author: Hantz Alvarez
        Project: s2si
      Events:
        getAllCategories:
          Type: Api
          Properties:
            Path: /categories
            Method: get
            RestApiId:
              Ref: RestAPI

  CreateNewBusiness:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: ../api/lambdas/businesses/createNewBusiness
      Handler: app.lambda_handler
      Runtime: python3.7
      MemorySize: 128
      Timeout: 180
      FunctionName: CreateNewBusiness
      Environment:
        Variables:
          BUSINESS_TABLE_NAME: !Ref BusinessTableParam
          LOG_LEVEL: "INFO"
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambdaVPCAccessExecutionRole
        - CloudWatchLogsFullAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref BusinessTableParam
      Tags:
        Author: Joel Fogue
        Project: s2si
      Events:
        CreateNewBusiness:
          Type: Api
          Properties:
            Path: "/Business"
            Method: post
            RestApiId:
              Ref: RestAPI

  FindAllBusinesses:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: ../api/lambdas/businesses/findAllBusinesses
      Handler: app.lambda_handler
      Runtime: python3.7
      MemorySize: 128
      Timeout: 180
      FunctionName: FindAllBusinesses
      Environment:
        Variables:
          BUSINESS_TABLE_NAME: !Ref BusinessTableParam
          LOG_LEVEL: "INFO"
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambdaVPCAccessExecutionRole
        - CloudWatchLogsFullAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref BusinessTableParam
      Tags:
        Author: Joel Fogue
        Project: s2si
      Events:
        CreateNewBusiness:
          Type: Api
          Properties:
            Path: "/Businesses"
            Method: get
            RestApiId:
              Ref: RestAPI

  FindAllBusinessesByCategories:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: ../api/lambdas/businesses/findAllBusinessesByCategories
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 900
      FunctionName: findAllBusinessesByCategories
      Policies:
        - AWSLambdaBasicExecutionRole
        - CloudWatchLogsFullAccess
        - AWSLambdaRole
      Tags:
        Author: Maxime Attobrah
        Project: s2si
      Events:
        findAllBusinessesByCategories:
          Type: Api
          Properties:
            Path: /Businesses/category
            Method: get
            RestApiId:
              Ref: RestAPI

  GetBusinessById:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: ../api/lambdas/businesses/getBusinessById
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 900
      FunctionName: GetBusinessById
      Policies:
        - AWSLambdaBasicExecutionRole
        - CloudWatchLogsFullAccess
        - AWSLambdaRole
        - DynamoDBCrudPolicy:
            TableName: !Ref BusinessTableParam
      Environment:
        Variables:
          BUSINESS_TABLE_NAME: !Ref BusinessTableParam
      Tags:
        Author: Joel Fogue
        Project: s2si
      Events:
        getBusinessById:
          Type: Api
          Properties:
            Path: /Business/{BusinessId}
            Method: get
            RestApiId:
              Ref: RestAPI

  UpdateExistingBusiness:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: ../api/lambdas/businesses/updateExistingBusiness
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 900
      FunctionName: UpdateExistingBusiness
      Environment:
        Variables:
          BUSINESS_TABLE_NAME: !Ref BusinessTableParam
      Policies:
        - AWSLambdaBasicExecutionRole
        - CloudWatchLogsFullAccess
        - AWSLambdaRole
        - DynamoDBCrudPolicy:
            TableName: !Ref BusinessTableParam
      Tags:
        Author: Joel Fogue
        Project: s2si
      Events:
        updateBusinessById:
          Type: Api
          Properties:
            Path: /Business/{BusinessId}
            Method: put
            RestApiId:
              Ref: RestAPI

  DeleteBusiness:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: ../api/lambdas/businesses/deleteBusiness
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 900
      FunctionName: DeleteBusiness
      Environment:
        Variables:
          BUSINESS_TABLE_NAME: !Ref BusinessTableParam
      Policies:
        - AWSLambdaBasicExecutionRole
        - CloudWatchLogsFullAccess
        - AWSLambdaRole
        - DynamoDBCrudPolicy:
            TableName: !Ref BusinessTableParam
      Tags:
        Author: Joel Fogue
        Project: s2si
      Events:
        getBusinessById:
          Type: Api
          Properties:
            Path: /Business/{BusinessId}
            Method: delete
            RestApiId:
              Ref: RestAPI
        

  RestAPI:
    Type: "AWS::Serverless::Api"
    DependsOn:
      - BusinessTable
      - CategoryTable
    Properties:
      StageName: develop
      CacheClusterEnabled: true
      CacheClusterSize: "0.5"
      Cors:
        AllowOrigin: "'*'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      Variables:
        Version: 0.4.0
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: swagger.yaml
