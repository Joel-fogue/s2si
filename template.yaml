AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: S2si Yonkers Businesses
Parameters:
  ArtifactBucket:
    Description: BucketName for the Artifacts for the APIs in this account
    Type: String
    Default: joelturkey
  Environment:
    AllowedValues:
      - Dev
      - QA
      - Prod
    ConstraintDescription: You must specify a valid EnvironmentValue
    Default: Dev
    Description: Environment to Deploy to
    Type: String
  
Globals:
  Function:
    Timeout: 5
    Tracing: Active

  # Api:
  #   TracingEnabled: true


Resources:

  CreateNewCategory:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: api/createNewCategory
      Handler: app.lambdaHandler
      Runtime: Node.js12.x
      MemorySize: 128
      Timeout: 180
      FunctionName: CreateNewCategory
      Environment:
        Variables:
          # TABLE_S2SI: my_s2si_table_name
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambdaVPCAccessExecutionRole
        - CloudWatchLogsFullAccess
      Tags:
        Author: Joel Fogue
        Project: s2si
      Events:
        CreateNewCategory:
          Type: Api
          Properties:
            Path: '/category'
            Method: post
            RestApiId:
              Ref: RestAPI
        
  UpdateCategory:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: api/updateCategory
      Handler: app.lambdaHandler
      Runtime: Node.js 12.x
      MemorySize: 128
      Timeout: 180
      FunctionName: UpdateCategory
      Environment:
        Variables:
          TABLE_s2si: my_s2si_table_name
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambdaVPCAccessExecutionRole
        - CloudWatchLogsFullAccess
      Tags:
        Author: Joel Fogue 
        Project: s2si
      Events:
        UpdateCategory:
          Type: Api
          Properties:
            Path: 'category/{categoryId}'
            Method: put
            RestApiId:
              Ref: RestAPI
        
  DeleteCategory:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: api/deleteCategory
      Handler: app.lambdaHandler
      Runtime: Node.js 12.x
      MemorySize: 128
      Timeout: 180
      FunctionName: DeleteCategory
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambdaFullAccess
        - AWSLambdaExecute
        - AWSLambdaVPCAccessExecutionRole
        - CloudWatchLogsFullAccess
      Tags:
        Author: Joel Fogue
        Project: s2si
      Events:
        DeleteCategory:
          Type: Api
          Properties:
            Path: '/delete'
            Method: delete
            RestApiId:
              Ref: RestAPI
       
  Categories:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: api/categories
      Handler: app.lambdaHandler
      Runtime: Node.js 12.x
      MemorySize: 128
      Timeout: 180
      FunctionName: Categories
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambdaVPCAccessExecutionRole
        - CloudWatchLogsFullAccess
      Tags:
        Author: Joel Fogue
        Project: s2si
      Events:
        getAllCategories:
          Type: Api
          Properties:
            Path: /categories
            Method: get
            RestApiId:
              Ref: RestAPI

  CreateNewBusiness:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: api/createNewBusiness
      Handler: app.lambdaHandler
      Runtime: Node.js 12.x
      MemorySize: 128
      Timeout: 180
      FunctionName: CreateNewBusiness
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambdaVPCAccessExecutionRole
        - CloudWatchLogsFullAccess
      Tags:
        Author: Joel Fogue
        Project: s2si
      Events:
        CreateNewBusiness:
          Type: Api
          Properties:
            Path: '/Business'
            Method: get
            RestApiId:
              Ref: RestAPI
        
  FindAllBusinessesByCategories:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: api/findAllBusinessesByCategories
      Handler: app.lambdaHandler
      Runtime: Node.js 12.x
      MemorySize: 128
      Timeout: 900
      FunctionName: findAllBusinessesByCategories
      Policies:
        - AWSLambdaBasicExecutionRole
        - CloudWatchLogsFullAccess
        - AWSLambdaRole
      Tags:
        Author: Joel Fogue
        Project: s2si
      Events:
        findAllBusinessesByCategories:
          Type: Api
          Properties:
            Path: /Businesses/category
            Method: get
            RestApiId:
              Ref: RestAPI

  RestAPI:
    Type: 'AWS::Serverless::Api'
    Properties:
      StageName: develop
      CacheClusterEnabled: true
      CacheClusterSize: '0.5'
      Cors:
        AllowOrigin: '''*'''
        AllowHeaders: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
      Variables:
        Version: 0.4.0
      DefinitionBody:
        swagger: '2.0'
        # securityDefinitions:
        #   CognitoAuthorizer:
        #     type: apiKey
        #     name: Authorization
        #     in: header
        #     x-amazon-apigateway-authtype: cognito_user_pools
        #     x-amazon-apigateway-authorizer:
        #       providerARNs:
        #         - 'Fn::Sub': >-
        #             arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPool}
        #       type: cognito_user_pools
        info:
          version: 0.4.0-alpha
          title:
            'Fn::Sub': 'S2si Yonkers Businesses'
        produces:
          - application/json
        consumes:
          - application/json
        responses:
          Unauthenticated:
            description: Unauthenticated
            schema:
              $ref: '#/definitions/Error'
            headers:
              Access-Control-Allow-Headers:
                type: string
              Access-Control-Allow-Methods:
                type: string
              Access-Control-Allow-Origin:
                type: string
          Forbidden:
            description: Not Authorized - Permissions Lacking
            schema:
              $ref: '#/definitions/Error'
            headers:
              Access-Control-Allow-Headers:
                type: string
              Access-Control-Allow-Methods:
                type: string
              Access-Control-Allow-Origin:
                type: string
          Throttled:
            description: Too Many Requests
            schema:
              $ref: '#/definitions/Error'
            headers:
              Access-Control-Allow-Headers:
                type: string
              Access-Control-Allow-Methods:
                type: string
              Access-Control-Allow-Origin:
                type: string
          Failure:
            description: Bad Request
            schema:
              $ref: '#/definitions/Error'
            headers:
              Access-Control-Allow-Headers:
                type: string
              Access-Control-Allow-Methods:
                type: string
              Access-Control-Allow-Origin:
                type: string
        x-amazon-apigateway-request-validators:
          basic:
            validateRequestBody: true
            validateRequestParameters: true
          params-only:
            validateRequestBody: false
            validateRequestParameters: true
        x-amazon-apigateway-request-validator: basic
        paths:
          /category:
            post:
              tags:
              - "Category"
              summary: "Adds a new category to the database"
              description: ""
              operationId: "CreateNewCategory"
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - in: "body"
                name: "body"
                description: "Category object that needs to be added to the DB"
                required: true
                schema:
                  $ref: "#/definitions/Category"
              responses:
                '200':
                  description: OK
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/qtAttributes'
                '400':
                  $ref: '#/responses/Failure'
                '401':
                  $ref: '#/responses/Unauthenticated'
                '403':
                  $ref: '#/responses/Forbidden'
                '429':
                  $ref: '#/responses/Throttled'
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri:
                  'Fn::Sub': >-
                    arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${CreateNewCategory}/invocations

          /category/{categoryId}:
            put:
              tags:
              - "Category"
              summary: "Update an existing category"
              description: ""
              operationId: "UpdateCategory"
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - name: "categoryId"
                in: "path"
                description: "The category that needs to be updated"
                required: true
                type: "string"
              - in: "body"
                name: "body"
                description: "Update the category object"
                required: true
                schema:
                  $ref: "#/definitions/Category"
              responses:
                '200':
                  description: OK
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/qtAttributes'
                '400':
                  $ref: '#/responses/Failure'
                '401':
                  $ref: '#/responses/Unauthenticated'
                '403':
                  $ref: '#/responses/Forbidden'
                '429':
                  $ref: '#/responses/Throttled'
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri:
                  'Fn::Sub': >-
                    arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${UpdateCategory}/invocations
            delete:
              tags:
              - "Category"
              summary: "Deletes a category"
              description: ""
              operationId: "DeleteCategory"
              produces:
              - "application/json"
              parameters:
              # - name: "api_key"
              #   in: "header"
              #   required: false
              #   type: "string"
              - name: "categoryId"
                in: "path"
                description: "Category id to delete"
                required: true
                type: "integer"
                format: "int64"
              responses:
                '200':
                  description: OK
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/qtAttributes'
                '400':
                  $ref: '#/responses/Failure'
                '401':
                  $ref: '#/responses/Unauthenticated'
                '403':
                  $ref: '#/responses/Forbidden'
                '429':
                  $ref: '#/responses/Throttled'
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri:
                  'Fn::Sub': >-
                    arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${DeleteCategory}/invocations
                
          /categories:      
            get:
              tags:
              - "Category"
              summary: "Returns a list of all categories"
              description: "Returns a list of all categories"
              operationId: "getAllCategories"
              produces:
              - "application/json"
              parameters: []
              responses:
                '200':
                  description: OK
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/qtAttributes'
                '400':
                  $ref: '#/responses/Failure'
                '401':
                  $ref: '#/responses/Unauthenticated'
                '403':
                  $ref: '#/responses/Forbidden'
                '429':
                  $ref: '#/responses/Throttled'
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: GET
                uri:
                  'Fn::Sub': >-
                    arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${getAllCategories}/invocations
                
          /Business: 
            post:
              tags:
              - "Business"
              summary: "Creates a new business"
              description: ""
              operationId: "CreateNewBusiness"
              produces:
              - "application/json"
              parameters:
              - in: "body"
                name: "body"
                description: "Body payload for creating a new business object"
                required: true
                schema:
                  $ref: "#/definitions/Business"
              responses:
                '200':
                  description: OK
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/qtAttributes'
                '400':
                  $ref: '#/responses/Failure'
                '401':
                  $ref: '#/responses/Unauthenticated'
                '403':
                  $ref: '#/responses/Forbidden'
                '429':
                  $ref: '#/responses/Throttled'
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri:
                  'Fn::Sub': >-
                    arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${CreateNewBusiness}/invocations
                  
          /Businesses/category:
            get:
              tags:
              - "Business"
              summary: "Finds all businesses by categories"
              description: ""
              operationId: "findAllBusinessesByCategories"
              produces:
              - "application/json"
              parameters:
              - name: "category"
                in: "query"
                description: "Category to filter the businesses by"
                required: true
                type: "array"
                items:
                  type: "string"
                collectionFormat: "multi"
              responses:
                '200':
                  description: OK
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/qtAttributes'
                '400':
                  $ref: '#/responses/Failure'
                '401':
                  $ref: '#/responses/Unauthenticated'
                '403':
                  $ref: '#/responses/Forbidden'
                '429':
                  $ref: '#/responses/Throttled'
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri:
                  'Fn::Sub': >-
                    arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${"findAllBusinessesByCategories"}/invocations
          
          /Business/{BusinessId}:
            get:
              tags:
              - "Business"
              summary: "Find A business by ID"
              description: "Returns a single business"
              operationId: "getBusinessById"
              produces:
              - "application/json"
              parameters:
              - name: "BusinessId"
                in: "path"
                description: "ID of the business to return"
                required: true
                type: "integer"
                format: "int64"
              responses:
                '200':
                  description: OK
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/qtAttributes'
                '400':
                  $ref: '#/responses/Failure'
                '401':
                  $ref: '#/responses/Unauthenticated'
                '403':
                  $ref: '#/responses/Forbidden'
                '429':
                  $ref: '#/responses/Throttled'
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri:
                  'Fn::Sub': >-
                    arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${"getBusinessById"}/invocations

            put:
              tags:
              - "Business"
              summary: "Update an existing Business"
              description: ""
              operationId: "UpdateExistingBusiness"
              produces:
              - "application/json"
              parameters:
              - name: "BusinessId"
                in: "path"
                description: "BusinessId that need to be updated"
                required: true
                type: "string"
              - in: "body"
                name: "body"
                description: "Payload for updating a new business"
                required: true
                schema:
                  $ref: "#/definitions/Business"
              responses:
                '200':
                  description: OK
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/qtAttributes'
                '400':
                  $ref: '#/responses/Failure'
                '401':
                  $ref: '#/responses/Unauthenticated'
                '403':
                  $ref: '#/responses/Forbidden'
                '429':
                  $ref: '#/responses/Throttled'
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri:
                  'Fn::Sub': >-
                    arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${"UpdateExistingBusiness"}/invocations
            delete:
              tags:
              - "Business"
              summary: "Deletes a Business"
              description: ""
              operationId: "deleteBusiness"
              produces:
              - "application/json"
              parameters:
              # - name: "api_key"
              #   in: "header"
              #   required: false
              #   type: "string"
              - name: "BusinessId"
                in: "path"
                description: "Business id to delete"
                required: true
                type: "integer"
                format: "int64"
              responses:
                '200':
                  description: OK
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/qtAttributes'
                '400':
                  $ref: '#/responses/Failure'
                '401':
                  $ref: '#/responses/Unauthenticated'
                '403':
                  $ref: '#/responses/Forbidden'
                '429':
                  $ref: '#/responses/Throttled'
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri:
                  'Fn::Sub': >-
                    arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${"deleteBusiness"}/invocations
            
        # securityDefinitions:
        #   api_key:
        #     type: "apiKey"
        #     name: "api_key"
        #     in: "header"
        definitions:
          Category:
            type: "object"
            properties:
              id:
                type: "integer"
                format: "int64"
              name:
                type: "string"
          Business:
            type: "object"
            required:
            - "BusinessName"
            - "Category"
            properties:
              id:
                type: "integer"
                format: "int64"
              BusinessName:
                type: "string"
              Category:
                $ref: "#/definitions/Category"
              Address:
                type: "string"
              PhoneNumber:
                type: "string"
              CategoryTwo:
                type: "string"
                description: "The category to filter the businesses by"
                enum:
                - "Banks"
                - "Restaurant"
                - "Retail"
                - "Services"
                - "Technology"
              URL:
              type: "string"
              description: "The url of the business website"
              BusinessImageIcon:
                description: "A picture of the business"
                type: "string"
              BusinessHours:
                type: "string"
                description: "The hours of operation of the business"
        responses:
          Unauthenticated:
            description: Unauthenticated
            schema:
              $ref: '#/definitions/Error'
            headers:
              Access-Control-Allow-Headers:
                type: string
              Access-Control-Allow-Methods:
                type: string
              Access-Control-Allow-Origin:
                type: string
          Forbidden:
            description: Not Authorized - Permissions Lacking
            schema:
              $ref: '#/definitions/Error'
            headers:
              Access-Control-Allow-Headers:
                type: string
              Access-Control-Allow-Methods:
                type: string
              Access-Control-Allow-Origin:
                type: string
          Throttled:
            description: Too Many Requests
            schema:
              $ref: '#/definitions/Error'
            headers:
              Access-Control-Allow-Headers:
                type: string
              Access-Control-Allow-Methods:
                type: string
              Access-Control-Allow-Origin:
                type: string
          Failure:
            description: Bad Request
            schema:
              $ref: '#/definitions/Error'
            headers:
              Access-Control-Allow-Headers:
                type: string
              Access-Control-Allow-Methods:
                type: string
              Access-Control-Allow-Origin:
                type: string